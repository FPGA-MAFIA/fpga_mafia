
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_SDRAM_RTL_Test(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,
	output                     clk_smp,
	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire  [15:0]  writedata;
wire  [15:0]  readdata;
wire          write;
wire          read;
wire          clk_test;
wire [3:0]    c_state;
wire [3:0]    wr_addr, rd_addr;

//=======================================================
//  Structural coding
//=======================================================

//	SDRAM frame buffer
Sdram_Control	u1	(	//	HOST Side
						   .REF_CLK(MAX10_CLK1_50),
					      . RESET_N(KEY[0]),
							//	FIFO Write Side 
						   .WR_DATA(writedata),
							.WR(write),
							.WR_ADDR(wr_addr),
							.WR_MAX_ADDR(25'h1ffffff),		//	
							.WR_LENGTH(9'h01),    
							.WR_LOAD(!KEY[0]),
							.WR_CLK(clk_test),
							//	FIFO Read Side 
						   .RD_DATA(readdata),
				        	.RD(read),
				        	.RD_ADDR(rd_addr),			//	Read address
							.RD_MAX_ADDR(25'h1ffffff),
							.RD_LENGTH(9'h01),
				        	.RD_LOAD(!KEY[0]),
							.RD_CLK(clk_test),
                     //	SDRAM Side
						   .SA(DRAM_ADDR),
						   .BA(DRAM_BA),
						   .CS_N(DRAM_CS_N),
						   .CKE(DRAM_CKE),
						   .RAS_N(DRAM_RAS_N),
				           .CAS_N(DRAM_CAS_N),
				           .WE_N(DRAM_WE_N),
						   .DQ(DRAM_DQ),
				           .DQM({DRAM_UDQM,DRAM_LDQM}),
						   .SDR_CLK(DRAM_CLK)	);


pll_test u2(
	.areset(),
	.inclk0(MAX10_CLK2_50),
	.c0(clk_test),
	.locked());

assign clk_smp = clk_test;
	
wire Done;

sdram_fsm sdram_fsm 
(
    .Clock(clk_test),  // 100Mhz from PLL
	 .nRst(KEY[0]),    // 
    .StartWr(!KEY[1]), // start writing to memory. key is active low then when pressed it becomes 0
    // write to sdram interface
    .WrRequest(write),    // write request - start writing to FIFO  
    .WriteData(writedata),
    .WriteAddress(wr_addr),
    // read from  sdram interface
    .RdRequest(read),   // read request - start reading from FIFO
    .ReadData(readdata),
    .ReadAddress(rd_addr),
    .Done(Done)  // finish reading from memory
    
);
		
	
	assign HEX0 = readdata[6:0];


endmodule
